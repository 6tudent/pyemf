$prog $version
$release_date
Copyright (c) $year $author ($author_email)

$url



ABSTRACT
========

pyemf is a pure python module that provides bindings for an ECMA-234
compliant vector graphics library.  ECMA-234 is the published
interface for the Windows GDI used in the Microsoft windows
environment and, more importantly, natively supported by the
OpenOffice suite of tools.

http://www.ecma-international.org/publications/standards/Ecma-234.htm


PREREQUISITES
=============

python (tested under 2.2, 2.3 and 2.4)


QUICK INSTALL
=============

python setup.py install

Yep, that's pretty much it.



FEATURES
========

Most of the methods of ECMA-234 are supported by pyemf.  Exceptions
are noted below, but generally the font support is limited in pyemf.

  Drawing Parameters: GetStockObject, SelectObject, DeleteObject,
  CreatePen, CreateSolidBrush, CreateHatchBrush, SetBkColor,
  SetBkMode, SetPolyFillMode

  Drawing Primitives: SetPixel, Polyline, Polygon, Rectangle,
  RoundRect, Ellipse, Arc, Chord, Pie, PolyBezier

  Path Primatives: BeginPath, EndPath, MoveTo, LineTo, PolylineTo,
  ArcTo, PolyBezierTo, CloseFigure, FillPath, StrokePath,
  StrokeAndFillPath

  Text: CreateFont, SetTextAlign, SetTextColor, TextOut

  Coordinate System Transformation: SetWorldTransform,
  ModifyWorldTransform

Unsupported
-----------

Palettes, bitmaps, and text metrics.




EXAMPLES
========


Creating an EMF
---------------

Here's a simple program (available as test1.py in the distribution)
that connects opposite corners of an 8in by 6in rectangle with lines:

#!/usr/bin/env python

import pyemf

width=8
height=6
dpi=300

emf=pyemf.EMF(width,height,dpi)
thin=emf.CreatePen(PS_SOLID,1,(0x00,0x00,0x00))
emf.SelectObject(thin)
emf.Polyline([(0,0),(width*dpi,height*dpi)])
emf.Polyline([(0,height*dpi),(width*dpi,0)])
emf.save("test1.emf")


Examining an EMF
----------------

pyemf, when run as a standalone program, has the ability to read an
EMF and print out the contents.  Run:

$ pyemf.py -v test1.emf

and it will print out a text summary of all the metafile records in
the file.



KNOWN ISSUES
============

-- Window and Viewport extents are not well understoood

I'm still trying to understand the various permutations of units set
by SetMapMode and how they effect the viewport and window extents.
So, all the functions Set[Viewport|Window][Org|Ext]Ex exist in pyemf,
but they aren't guarenteed to do the right thing, unless you the user
happen to know what the right thing is.

I certainly don't know what the right thing is yet in all cases.  The
ECMA spec is unclear, and the Microsoft docs are fuzzy at best.


-- Bitmap functions don't exist

Since I wanted to support the vector graphics capabilities, bitmap
support wasn't a high priority to me.  Patches welcome, however.


-- Text metrics functions don't exist

A full GDI implementation would include font metrics such that fine
grained control over glyph placement is available.  To really do text
extents properly, a complete font metrics package would need to be
added.  This requires a module that could link to something like
freetype.  There is a freetype module included in matplotlib that I
may look at for some future release, and in fact for my matplotlib
modifications, I've used the freetype module with a bit of hackery to
be able to place text strings in relation to one another.

So, only the basics of font support are included.  It seems to be a
bit renderer dependent as to how the fonts will be chosen based on the
specifications to CreateFontA.  For example, what happens when you
request a font that isn't available on your target computer?

Comparing the output on PowerPoint vs OpenOffice Impress seems to show
that fonts render about the same, but in terms of precisely placing
strings of text in relation to other strings (e.g. knowing where a
string ends so you could append a string right after that), it seems
that we're a bit out of luck for the moment unless we can integrate it
with some external library for metrics.

I'm still needing to do more research before I add font extents to
pyemf.  If you're curious and want to figure out how this stuff works
in GDI, the prime suspect is the function GetTextExtentPoint32A(),
which should measure the width and height of a string.  But also of
interest are how CreateFont and CreateFontIndirect and how they
specify fonts.




DISCLAIMER
==========

$prog, Copyright (c) $year $author ($author_email)

$prog comes with ABSOLUTELY NO WARRANTY; for details see the
file COPYING included in the source distribution, or see the web site
http://www.gnu.org/copyleft/lesser.html for more information.
